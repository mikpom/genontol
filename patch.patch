diff --git a/genontol/obo.py b/home/pommy/Dropbox/src/python/lib/genontol_old/genontol/obo.py
index 00620e2..81a11ea 100644
--- a/genontol/obo.py
+++ b/home/pommy/Dropbox/src/python/lib/genontol_old/genontol/obo.py
@@ -40,7 +20,7 @@ def _parse_terms(terms):
     for term in terms:
         obsolete = False
         node = {}
-        parents = []
+        parents = {}
         for line in term:
             if line.startswith('id:'):
                 id = line[4:-1]
@@ -49,28 +29,31 @@ def _parse_terms(terms):
             elif line.startswith('namespace:'):
                 node['namespace'] = line[11:-1]
             elif line.startswith('is_a:'):
-                parents.append(line[6:16])
+                parents[line[6:16]] = 'is_a'
             elif line.startswith('relationship: part_of'):
-                parents.append(line[22:32])
+                parents[line[22:32]] = 'part_of'
             elif line.startswith('is_obsolete'):
                 obsolete = True
                 break
         if not obsolete:
-            edges = [(p, id) for p in parents] # will reverse edges later
+            edges = [(p, id, {'rel':r}) for p, r in parents.items()] # will reverse edges later
             yield (id, node), edges
         else:
             continue
 
 _filename = 'db/go-basic.obo'
 
-def ontology(file):
+def read_obo(file):
     """ read ontology from file
     :param file: file path of file handle
     """
-    O = nx.DiGraph()
+    G = nx.DiGraph()
 
     if isinstance(file, str):
-        f = open(file)
+        if file.endswith('.gz'):
+            f = gzip.open(file, 'rt')
+        else:
+            f = open(file)
         we_opened_file = True
     else:
         f = file
@@ -81,16 +64,16 @@ def ontology(file):
         terms = _filter_terms(tokens)
         entries = _parse_terms(terms)
         nodes, edges = zip(*entries)
-        O.add_nodes_from(nodes)
-        O.add_edges_from(itertools.chain.from_iterable(edges))
-        O.graph['roots'] = {data['name'] : n for n, data in O.node.items()
-                if data['name'] == data['namespace']}
+        G.add_nodes_from(nodes)
+        G.add_edges_from(itertools.chain.from_iterable(edges))
+        G.graph['roots'] = {data['name'] : n for n, data in G.node.items()
+                            if data['name'] == data['namespace']}
     finally:
         if we_opened_file:
             f.close()
 
-    for root in O.graph['roots'].values():
-        for n, depth in nx.shortest_path_length(O, root).items():
-            node = O.node[n]
+    for root in G.graph['roots'].values():
+        for n, depth in nx.shortest_path_length(G, root).items():
+            node = G.node[n]
             node['depth'] = min(depth, node.get('depth', float('inf')))
-    return O.reverse()
+    return G.reverse()
